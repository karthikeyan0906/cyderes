apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-06-16T05:53:03Z"
    generateName: nginx-app-deployment-ff8555d57-
    labels:
      app: nginx-app
      pod-template-hash: ff8555d57
    name: nginx-app-deployment-ff8555d57-7cvh2
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-app-deployment-ff8555d57
      uid: 2daead85-e987-4698-b711-943eef578521
    resourceVersion: "191805"
    uid: bf6ebd49-3ceb-4291-8318-faf5b99f988d
  spec:
    containers:
    - image: karthikeyan0906/nginx-custom:latest
      imagePullPolicy: IfNotPresent
      name: webserver
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c6qk4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-172-31-42-125.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-c6qk4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T05:53:15Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T05:53:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T05:53:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T05:53:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T05:53:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0bf7adb5b4db70ca26f11ee89a0097269be69a9b6fe69d2007d4b79fb7f29e02
      image: docker.io/karthikeyan0906/nginx-custom:latest
      imageID: docker.io/karthikeyan0906/nginx-custom@sha256:8e949e92651f0f5e424d55820a93463a805896487fefb3ce25427cb343731511
      lastState: {}
      name: webserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-06-16T05:53:15Z"
    hostIP: 172.31.42.125
    hostIPs:
    - ip: 172.31.42.125
    phase: Running
    podIP: 172.31.46.193
    podIPs:
    - ip: 172.31.46.193
    qosClass: BestEffort
    startTime: "2025-06-16T05:53:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-06-16T02:41:01Z"
    generateName: nginx-app-deployment-ff8555d57-
    labels:
      app: nginx-app
      pod-template-hash: ff8555d57
    name: nginx-app-deployment-ff8555d57-nmq86
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-app-deployment-ff8555d57
      uid: 2daead85-e987-4698-b711-943eef578521
    resourceVersion: "160205"
    uid: 4bba62ee-edc6-48fb-8933-86bd39ca94a6
  spec:
    containers:
    - image: karthikeyan0906/nginx-custom:latest
      imagePullPolicy: IfNotPresent
      name: webserver
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zvgth
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-172-31-2-133.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-zvgth
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T02:41:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T02:41:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T02:41:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T02:41:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-06-16T02:41:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://094b3425bd05fb7aa45f847178291250056f5ce7290519e7f865a00bd007c0c9
      image: docker.io/karthikeyan0906/nginx-custom:latest
      imageID: docker.io/karthikeyan0906/nginx-custom@sha256:eef76021b087afbdbcbd48ca049e6b038a6d75181311c1c7f8f830d90bd4403a
      lastState: {}
      name: webserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-06-16T02:41:12Z"
    hostIP: 172.31.2.133
    hostIPs:
    - ip: 172.31.2.133
    phase: Running
    podIP: 172.31.8.132
    podIPs:
    - ip: 172.31.8.132
    qosClass: BestEffort
    startTime: "2025-06-16T02:41:01Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-06-15T10:15:09Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "194"
    uid: 2fc14cd1-ec0f-4675-9a81-0cf809faef39
  spec:
    clusterIP: 10.100.0.1
    clusterIPs:
    - 10.100.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: nginx-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-06-16T02:41:01Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/managed-by: Helm
    name: nginx-app-service
    namespace: default
    resourceVersion: "191773"
    uid: 9899e9f8-6d84-4ef5-9dd9-65a56202fd89
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.100.177.39
    clusterIPs:
    - 10.100.177.39
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - nodePort: 32282
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: nginx-app
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: a9899e9f86d844ef59dd965a56202fd8-1106569406.ap-south-1.elb.amazonaws.com
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nginx-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-06-16T02:41:01Z"
    generation: 2
    labels:
      app.kubernetes.io/managed-by: Helm
    name: nginx-app-deployment
    namespace: default
    resourceVersion: "191807"
    uid: 961c414d-550e-4f6f-ac0d-921fe241b188
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx-app
      spec:
        containers:
        - image: karthikeyan0906/nginx-custom:latest
          imagePullPolicy: IfNotPresent
          name: webserver
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-06-16T02:41:01Z"
      lastUpdateTime: "2025-06-16T02:41:12Z"
      message: ReplicaSet "nginx-app-deployment-ff8555d57" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-06-16T05:53:15Z"
      lastUpdateTime: "2025-06-16T05:53:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nginx-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-06-16T02:41:01Z"
    generation: 2
    labels:
      app: nginx-app
      pod-template-hash: ff8555d57
    name: nginx-app-deployment-ff8555d57
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-app-deployment
      uid: 961c414d-550e-4f6f-ac0d-921fe241b188
    resourceVersion: "191806"
    uid: 2daead85-e987-4698-b711-943eef578521
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: nginx-app
        pod-template-hash: ff8555d57
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx-app
          pod-template-hash: ff8555d57
      spec:
        containers:
        - image: karthikeyan0906/nginx-custom:latest
          imagePullPolicy: IfNotPresent
          name: webserver
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
kind: List
metadata:
  resourceVersion: ""
